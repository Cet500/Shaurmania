import shutil
from pathlib import Path

from django.conf import settings
from django.core.management.base import BaseCommand
from ..utils.tree_utils import TreeBuilder


class Command(BaseCommand):
	help = "–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫—ç—à-—Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"

	def add_arguments(self, parser):
		parser.add_argument(
			"--noinput",
			"--no-input",
			action="store_true",
			dest="noinput",
			help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
		)

	def get_pycache_dirs(self, base_dir):
		"""–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∏—Å–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏"""
		exclude_dirs = {'.venv', 'venv', '.git', '.idea'}
		pycache_dirs = []

		for pycache_dir in base_dir.rglob("__pycache__"):
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—É—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
			if any(exclude in pycache_dir.parts for exclude in exclude_dirs):
				continue
			pycache_dirs.append(pycache_dir)

		return pycache_dirs

	def handle(self, *args, **options):
		# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		targets = []

		# Media cache
		if hasattr(settings, "MEDIA_ROOT"):
			media_cache = Path(settings.MEDIA_ROOT) / "CACHE"
			if media_cache.exists():
				targets.append(media_cache)

		# Pycache (–∏—Å–∫–ª—é—á–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ)
		base_dir = Path(settings.BASE_DIR)
		pycache_dirs = self.get_pycache_dirs(base_dir)
		targets.extend(pycache_dirs)

		# Pytest cache
		pytest_cache = base_dir / ".pytest_cache"
		if pytest_cache.exists():
			targets.append(pytest_cache)

		# Static cache
		if hasattr(settings, "STATIC_ROOT"):
			static_cache = Path(settings.STATIC_ROOT) / "CACHE"
			if static_cache.exists():
				targets.append(static_cache)

		# –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
		existing_targets = [t for t in targets if t.exists()]

		if not existing_targets:
			self.stdout.write("–ö—ç—à-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			return

		# –ò—Å–ø–æ–ª—å–∑—É–µ–º TreeBuilder –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
		tree_builder = TreeBuilder(stdout=self.stdout, style=self.style)

		self.stdout.write("–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫—ç—à-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")

		# –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞
		for target in existing_targets:
			self.stdout.write(f"\n{target}:")
			if target.is_dir():
				tree = tree_builder.build_tree(target)
				tree_builder.print_tree(tree)
			else:
				self.stdout.write(f"  üìÑ {target.name}")

		# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
		if not options["noinput"]:
			confirm = input("\n–í—ã —É–≤–µ—Ä–µ–Ω—ã? [y/n]: ")
			if not confirm.lower().startswith("y"):
				self.stdout.write("–û—Ç–º–µ–Ω–µ–Ω–æ")
				return

		# –£–¥–∞–ª–µ–Ω–∏–µ
		deleted_count = 0
		for item in existing_targets:
			try:
				if item.is_dir():
					shutil.rmtree(item)
				else:
					item.unlink()
				self.stdout.write(f"–£–¥–∞–ª–µ–Ω–æ: {item}")
				deleted_count += 1
			except Exception as e:
				self.stderr.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {item}: {e}")

		self.stdout.write(
			self.style.SUCCESS(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∫—ç—à-–æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ {len(existing_targets)}")
		)

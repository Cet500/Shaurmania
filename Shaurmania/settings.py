# ============================================================================ #
#                   Django settings for Shaurmania project.                    #
#         Generated by 'django-admin startproject' using Django 5.1.3.         #
# ============================================================================ #

import environ

from pathlib import Path
from os import path

BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env( path.join( BASE_DIR, '.env' ) )


# SECURITY SETTINGS ============================================================

SECRET_KEY    = env( "SECRET_KEY" )
DEBUG         = env( "DEBUG" )
IS_DDT_ACTIVE = env( "IS_DDT_ACTIVE", default = False )

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
]

INTERNAL_IPS = [
    "127.0.0.1",
]


# APPLICATION DEFINITION =======================================================

ROOT_URLCONF = "Shaurmania.urls"
WSGI_APPLICATION = "Shaurmania.wsgi.application"

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "compressor",
    "imagekit",
    "django_jinja",

    "main.apps.MainConfig",
	"cart.apps.CartConfig"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


# DJANGO DEBUG TOOL ============================================================

if IS_DDT_ACTIVE:
    INSTALLED_APPS += [ "debug_toolbar", ]

    DEBUG_TOOLBAR_CONFIG = {
        'DISABLE_PANELS': [
            'debug_toolbar.panels.cache.CachePanel',
        ],
    }

    MIDDLEWARE.insert(0, "debug_toolbar.middleware.DebugToolbarMiddleware")


# TEMPLATES SETTINGS ===========================================================

TEMPLATES = [
    {
        "BACKEND": "django_jinja.jinja2.Jinja2",
        "DIRS": [ BASE_DIR / "template" ],
        "APP_DIRS": True,
        "OPTIONS": {
            'match_extension': '.jinja',
            'match_regex'    : None,
            'app_dirname'    : 'templates',
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'main.context_processors.feature_flags'
            ],
            'extensions': [
                'jinja2.ext.i18n',
                'django_jinja.builtins.extensions.DebugExtension',
                'django_jinja.builtins.extensions.StaticFilesExtension',
                'django_jinja.builtins.extensions.CacheExtension',
                'django_jinja.builtins.extensions.CsrfExtension',
                'django_jinja.builtins.extensions.UrlsExtension',
                "django_jinja.builtins.extensions.TimezoneExtension",
                'django_jinja.builtins.extensions.DjangoFiltersExtension',
                'compressor.contrib.jinja2ext.CompressorExtension'
            ],
            "policies": {
                "ext.i18n.trimmed": True,
            },
            "bytecode_cache": {
                "name": "default",
                "backend": "django_jinja.cache.BytecodeCache",
                "enabled": True,
            },
            "autoescape": True,
        }
    },
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [ BASE_DIR / "template" ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# DATABASE SETTINGS ============================================================

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / env( 'DATABASE_NAME' ),
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = 'main.User'


# LOGS SUBSYSTEM ===============================================================

LOG_DIR = BASE_DIR / env( 'LOG_DIR', default = 'logs' )
LOG_DIR.mkdir(exist_ok=True)

( LOG_DIR / 'django'      ).mkdir(exist_ok=True)
( LOG_DIR / 'security'    ).mkdir(exist_ok=True)
( LOG_DIR / 'third-party' ).mkdir(exist_ok=True)
( LOG_DIR / 'server'      ).mkdir(exist_ok=True)
( LOG_DIR / 'database'    ).mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'simple': {
            'format' : '[ {asctime} | {levelname} ] {message}',
            'datefmt': '%H:%M:%S',
            'style'  : '{'
        },
        'verbose': {
            'format': '[ {asctime} | {levelname: <8} ] {name} : {message}',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'style': '{',
        },
        'errors': {
            'format' : '[ {asctime} | {pathname} > {funcName} > {lineno} ] {name} : {message}',
            'datefmt': '%Y-%m-%d %H:%M:%S',
            'style'  : '{',
        },
        'overkill': {
            'format' : '[ {asctime} | {levelname: <8} | {pathname} > {funcName} > {lineno} ] {name} : {message}',
            'datefmt': '%Y-%m-%d %H:%M:%S.%f',
            'style'  : '{',
        }
    },

    'handlers': {
        # universal
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': LOG_DIR / 'logs.log',
            'maxBytes': 1024 * 1024 * env('LOG_MAIN_FILE_SIZE', default = 6),
            'backupCount': env('LOG_BACKUP_COUNT', default = 10),
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },
        # custom
        'file_django': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': LOG_DIR / 'django' / 'django.log',
            'maxBytes': 1024 * 1024 * env('LOG_FILE_SIZE', default = 2),
            'backupCount': env('LOG_BACKUP_COUNT', default = 10),
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },
        'file_security': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': LOG_DIR / 'security' / 'security.log',
            'maxBytes': 1024 * 1024 * 2 * env('LOG_FILE_SIZE', default = 2),  # x2
            'backupCount': 2 * env('LOG_BACKUP_COUNT', default = 10),         # x2
            'formatter': 'overkill',
            'encoding': 'utf-8'
        },
        'file_third': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': LOG_DIR / 'third-party' / 'apps.log',
            'maxBytes': 1024 * 1024 * env('LOG_FILE_SIZE', default = 2),
            'backupCount': env('LOG_BACKUP_COUNT', default = 10),
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },
        'file_server': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': LOG_DIR / 'server' / 'server.log',
            'maxBytes': 1024 * 1024 * env('LOG_FILE_SIZE', default = 2),
            'backupCount': env('LOG_BACKUP_COUNT', default = 10),
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },
        'file_database': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': LOG_DIR / 'database' / 'database.log',
            'maxBytes': 1024 * 1024 * env('LOG_FILE_SIZE', default = 2),
            'backupCount': env('LOG_BACKUP_COUNT', default = 10),
            'formatter': 'verbose',
            'encoding': 'utf-8'
        },
        # errors
        'file_error': {
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': LOG_DIR / 'errors.log',
            'maxBytes': 1024 * 1024 * env( 'LOG_FILE_SIZE', default = 2 ),
            'backupCount': env( 'LOG_BACKUP_COUNT', default = 10 ),
            'formatter': 'errors',
            'level': 'ERROR',
        },
    },

    'root': {
        'handlers': [ 'console', 'file', 'file_error' ],
        'level': env('ROOT_LOG_LEVEL', default = 'INFO'),
        'encoding': 'utf-8'
    },

    'loggers': {
        # django
        'django': {
            'handlers': [ 'console', 'file', 'file_error', 'file_django' ],
            'level': 'INFO',
            'propagate': False,
        },
        'django.core': {
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'level': 'INFO',
            'propagate': True,
        },
        'django.server': {
            'level': 'INFO',
            'propagate': True,
        },
        'django.contrib.sessions': {
            'level': 'INFO',
            'propagate': True,
        },
        # security
        'django.security': {
            'handlers': [ 'file', 'file_error', 'file_security' ],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.middleware.security': {
            'handlers': [ 'file', 'file_error', 'file_security' ],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.middleware.csrf': {
            'handlers': [ 'file', 'file_error', 'file_security' ],
            'level': 'WARNING',
            'propagate': False,
        },
        # database
        'django.db.backends': {
            'handlers': [ 'file', 'file_error', 'file_database' ],
            'level': 'DEBUG',
            'propagate': False,
        },
        # third-party
        'compressor': {
            'handlers': [ 'file', 'file_error', 'file_third' ],
            'level': env( 'THIRD_LOG_LEVEL', default = 'INFO' ),
            'propagate': False,
        },
        'imagekit': {
            'handlers': [ 'file', 'file_error', 'file_third' ],
            'level': env( 'THIRD_LOG_LEVEL', default = 'INFO' ),
            'propagate': False,
        },
        'django_jinja': {
            'handlers': [ 'file', 'file_error', 'file_third' ],
            'level': env( 'THIRD_LOG_LEVEL', default = 'INFO' ),
            'propagate': False,
        },
        'faker': {
            'handlers': [ 'file', 'file_error', 'file_third' ],
            'level': env( 'THIRD_LOG_LEVEL', default = 'INFO' ),
            'propagate': False,
        },
        # main
        'main': {
            'handlers': [ 'console', 'file', 'file_error', 'file_server' ],
            'level': 'DEBUG',
            'propagate': False,
        },
        # cart
        'cart': {
            'handlers': [ 'console', 'file', 'file_error', 'file_server' ],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# PASSWORD VALIDATION ==========================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# INTERNATIONALIZATION =========================================================

LANGUAGE_CODE = "ru-ru"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# STATIC FILES =================================================================

STATIC_URL = env('STATIC_URL', default='static/')
STATIC_ROOT = BASE_DIR / 'static_root'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

MEDIA_URL  = env('MEDIA_URL', default='media/')
MEDIA_ROOT = BASE_DIR / 'media'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder'
)

COMPRESS_ENABLED = env('IS_COMPRESS_ENABLED', default = True)


# TESTS SETTINGS ===============================================================

TEST_MAX_RESPONSE_TIME = env( 'TEST_MAX_RESPONSE_TIME', default = 1.0 )
TEST_FAKER_SEED        = env( 'TEST_FAKER_SEED',        default = -1  )


# TEMPORAL EVENTS ==============================================================

IS_HALLOWEEN  = env( 'IS_HALLOWEEN', default = False )
IS_NEW_YEAR   = env( 'IS_NEW_YEAR',  default = False )


# OTHER SETTINGS ===============================================================

AVATARS_COUNT = 81
